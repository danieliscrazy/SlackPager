# This code is generated by AI. This file (slackbot.py) is exempt from the GNU GPLv3 license the rest of the repository is under, and you may do whatever you want with it.
from slack_bolt import App
from slack_bolt.adapter.flask import SlackRequestHandler
from flask import Flask, request
import os
import requests
import threading
import time

SLACK_BOT_TOKEN = "[REDACTED]"
SLACK_SIGNING_SECRET = "[REDACTED]"
TARGET_CHANNEL_ID = "C09539G6DU0"

app = App(token=SLACK_BOT_TOKEN, signing_secret=SLACK_SIGNING_SECRET)
flask_app = Flask(__name__)
handler = SlackRequestHandler(app)

MESSAGE_WEBHOOK_URL = "[REDACTED]"  # For message content
USERNAME_WEBHOOK_URL = "[REDACTED]"  # For sender username

def get_username(user_id):
    try:
        response = app.client.users_info(user=user_id)
        if response["ok"]:
            user_info = response["user"]
            username = user_info["profile"].get("display_name") or user_info["profile"].get("real_name") or user_id
            return username
    except Exception as e:
        print(f"Error fetching username for {user_id}: {e}")
    return user_id 

# Helper function to send a webhook
def send_webhook(url, content):
    try:
        response = requests.post(
            url,
            data=content.encode('utf-8'), 
            headers={"Content-Type": "text/plain"}
        )
        response.raise_for_status()
        print(f"Webhook sent to {url}: {content}")
    except Exception as e:
        print(f"Error sending webhook to {url}: {e}")

@app.event("message")
def handle_message_events(body, logger):
    event = body.get("event", {})
    channel = event.get("channel")
    text = event.get("text")
    user_id = event.get("user")

    if channel == TARGET_CHANNEL_ID and user_id is not None:
        username = get_username(user_id)
        logger.info(f"Message in target channel from {username}: {text}")
        print(f"[{username}] {text}")
      
        threading.Thread(target=send_webhook, args=(MESSAGE_WEBHOOK_URL, text)).start()

        def delayed_webhook():
            time.sleep(1)
            send_webhook(USERNAME_WEBHOOK_URL, username)

        threading.Thread(target=delayed_webhook).start()

@flask_app.route("/slack/events", methods=["POST"])
def slack_events():
    return handler.handle(request)

if __name__ == "__main__":
    flask_app.run(host="0.0.0.0", port=36511)
